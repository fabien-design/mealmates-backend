security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
    hwi_provider:
      id: hwi_oauth.user.provider.entity

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/v1/login
      stateless: true
      user_checker: App\Security\UserChecker
      json_login:
        check_path: /api/v1/login_check
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: App\Security\AuthenticationFailureHandler
      provider: app_user_provider

    api:
      pattern: ^/api/v1
      stateless: true
      entry_point: jwt
      user_checker: App\Security\UserChecker
      jwt: ~
      refresh_jwt:
        check_path: /api/v1/token/refresh
        provider: app_user_provider
      provider: app_user_provider

    main:
      oauth:
        resource_owners:
          google: "/connect/google/check"
          github: "/connect/github/check"
        login_path: /connect
        use_forward: false
        failure_path: /connect
        default_target_path: /login/success
        oauth_user_provider:
          service: App\Security\OAuthUserProvider
        provider: hwi_provider

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/v1/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/register, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/verify-email, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/resend-verification-email, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/(login|token/refresh), roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/user/logged, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/payments/webhook, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/products/nearby, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/products/\d+, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/doc, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
